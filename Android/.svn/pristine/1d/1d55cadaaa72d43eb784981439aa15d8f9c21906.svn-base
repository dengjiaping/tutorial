package com.nonobank.http.imple;

import java.util.HashMap;
import java.util.Map;

import com.android.volley.AuthFailureError;
import com.android.volley.Request.Method;
import com.android.volley.RequestQueue;
import com.android.volley.Response.ErrorListener;
import com.android.volley.Response.Listener;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.GsonRequest;
import com.android.volley.toolbox.StringRequest;
import com.nonobank.bean.BankCardListInfo;
import com.nonobank.bean.CommonResponseInfo;
import com.nonobank.bean.CommonResponseListInfo;
import com.nonobank.bean.Info4AddBankCard;
import com.nonobank.common.utils.LogUtils;
import com.nonobank.constant.NetConstantValue;
import com.nonobank.http.BankCardEngine;
import com.nonobank.manager.BaseApplication;
import com.nonobank.utils.UIUtils;
import com.nonobank.utils.VolleyUtils;

public class BankCardEngineImpl implements BankCardEngine {
	private RequestQueue mRequestQueue; // 网络请求队列
	private String url;

	public BankCardEngineImpl() {
		mRequestQueue = VolleyUtils.getInstance(BaseApplication.getApplication())
				.getmRequestQueue();
	}

	public void getBankList(final String sessionId, final String pageSize, final String pageNumber,
			final Listener<BankCardListInfo> successListener) {
		url = NetConstantValue.HOST_URL + NetConstantValue.getBankList;
		LogUtils.d(url);
		LogUtils.d("sessionId" + sessionId + "===" + "pageSize" + pageSize);
		GsonRequest<BankCardListInfo> gsonRequest = new GsonRequest<BankCardListInfo>(Method.POST,
				url, BankCardListInfo.class, successListener, new CommonErrorListener()) {
			// post参数
			@Override
			protected Map<String, String> getParams() throws AuthFailureError {
				Map<String, String> map = new HashMap<String, String>();
				map.put("sessionId", sessionId);
				map.put("pageSize", pageSize);
				map.put("pageNumber", pageNumber);
				return map;
			}

		};
		// 加入队列,勿忘
		mRequestQueue.add(gsonRequest);
	}

	/** 根据银行卡号获取开户行信息 */
	@Override
	public void getMsgByBankCode(final String sessionId, final String bankNo,
			Listener<CommonResponseInfo> successListener) {
		url = NetConstantValue.HOST_URL + NetConstantValue.getMsgByBankCode;
		LogUtils.d(url);
		LogUtils.d("sessionId"+sessionId+"==="+"bankNo"+bankNo);
		GsonRequest<CommonResponseInfo> stringRequest = new GsonRequest<CommonResponseInfo>(Method.POST, url,CommonResponseInfo.class, successListener,new CommonErrorListener()){
			@Override
			protected Map<String, String> getParams() throws AuthFailureError {
				Map<String, String> map = new HashMap<String, String>();
				map.put("sessionId", sessionId);
				map.put("bankNo", bankNo);
				return map;
			}
			
		};
		// 加入队列,勿忘
		mRequestQueue.add(stringRequest);
	}

	/**
	 * 请求失败通用的回调
	 * 
	 * @author mio
	 * 
	 */
	class CommonErrorListener implements ErrorListener {

		@Override
		public void onErrorResponse(VolleyError error) {
			LogUtils.d("访问失败");
			UIUtils.showToastSafe("访问失败,请检查网络是否畅通");
		}
	}

	
	@Override
	public void getCitys(final String province, Listener<CommonResponseListInfo> successListener) {
		url = NetConstantValue.HOST_URL + NetConstantValue.getCitys;
		LogUtils.d(url);
		LogUtils.d("province:"+province);
		
		GsonRequest<CommonResponseListInfo> stringRequest = new GsonRequest<CommonResponseListInfo>(Method.POST, url,CommonResponseListInfo.class, successListener,new CommonErrorListener()){
			@Override
			protected Map<String, String> getParams() throws AuthFailureError {
				Map<String, String> map = new HashMap<String, String>();
				map.put("province", province);
				return map;
			}
		};
		// 加入队列,勿忘
		mRequestQueue.add(stringRequest);
	}

	@Override
	public void addBankCard(final Info4AddBankCard info4AddBankCard,
			Listener<CommonResponseInfo> successListener) {
		url = NetConstantValue.HOST_URL + NetConstantValue.addBankCard;
		LogUtils.d(url);
		GsonRequest<CommonResponseInfo> stringRequest = new GsonRequest<CommonResponseInfo>(Method.POST, url,CommonResponseInfo.class, successListener,new CommonErrorListener()){
			@Override
			protected Map<String, String> getParams() throws AuthFailureError {
				Map<String, String> map = new HashMap<String, String>();
				map.put("bankAccount",info4AddBankCard.bankAccount);
				map.put("bankCityCode",info4AddBankCard.bankCityCode);
				map.put("bankCityName",info4AddBankCard.bankCityName);
				map.put("bankCatName",info4AddBankCard.bankCatName);
				map.put("bankCat", info4AddBankCard.bankCat);
				map.put("bankProvicenCode",info4AddBankCard.bankProvicenCode);
				map.put("bankProvinceName",info4AddBankCard.bankProvinceName);
				map.put("idnum",info4AddBankCard.idnum);
				map.put("realname",info4AddBankCard.realname);
				map.put("sessionId", info4AddBankCard.sessionId);
				return map;
			}
		};
		// 加入队列,勿忘
		mRequestQueue.add(stringRequest);
	}
	
	@Override
	public void deleteBankCard(final String sessionId, final String bankId,
			Listener<CommonResponseInfo> successListener) {
		url = NetConstantValue.HOST_URL + NetConstantValue.deleteBankCard+bankId;
		LogUtils.d(url);
		GsonRequest<CommonResponseInfo> stringRequest = new GsonRequest<CommonResponseInfo>(Method.POST, url,CommonResponseInfo.class, successListener,new CommonErrorListener()){
			@Override
			protected Map<String, String> getParams() throws AuthFailureError {
				Map<String, String> map = new HashMap<String, String>();
				map.put("sessionId", sessionId);
				map.put("bankId",bankId);
				return map;
			}
		};
		// 加入队列,勿忘
		mRequestQueue.add(stringRequest);
	}

	@Override
	public void openYiLianAuth(final String sessionId, final String bankId,
			Listener<CommonResponseInfo> successListener) {
		url = NetConstantValue.HOST_URL + NetConstantValue.openYiLian;
		LogUtils.d(url);
		LogUtils.d("sessionId:"+sessionId+",bankId:"+bankId);
		
		GsonRequest<CommonResponseInfo> stringRequest = new GsonRequest<CommonResponseInfo>(Method.POST, url,CommonResponseInfo.class, successListener,new CommonErrorListener()){
			@Override
			protected Map<String, String> getParams() throws AuthFailureError {
				Map<String, String> map = new HashMap<String, String>();
				map.put("sessionId", sessionId);
				map.put("bankId", bankId);
				return map;
			}
		};
		// 加入队列,勿忘
		mRequestQueue.add(stringRequest);
	}

	@Override
	public void reAdvanceMoney(final String sessionId, final String bankId, final String bankPrice,
			final String payPassword, Listener<CommonResponseInfo> successListener) {
		url = NetConstantValue.HOST_URL + NetConstantValue.microSiteRecharge;
		LogUtils.d(url);
		GsonRequest<CommonResponseInfo> stringRequest = new GsonRequest<CommonResponseInfo>(Method.POST, url,CommonResponseInfo.class, successListener,new CommonErrorListener()){
			@Override
			protected Map<String, String> getParams() throws AuthFailureError {
				Map<String, String> map = new HashMap<String, String>();
				map.put("sessionId", sessionId);
				map.put("bankId", bankId);
				map.put("bankPrice", bankPrice);
				map.put("payPassword", payPassword);
				return map;
			}
		};
		// 加入队列,勿忘
		mRequestQueue.add(stringRequest);
	}

	

}
